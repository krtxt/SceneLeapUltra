# PTv3 Light (Point Transformer V3) Backbone Configuration
# 轻量版PTv3配置，适用于资源受限的环境
# 适用于6维点云数据 (XYZ + RGB)

name: ptv3
use_pooling: false      # 不使用全局池化，保持点级特征用于后续处理
grid_size: 0.03         # 稍大的体素化网格，减少点数和计算量
in_channels: 6          # 输入通道数: xyz(3维) + rgb(3维)

max_context_points: 256 # 新增：限制传给UNet的上下文点上限（轻量版更小）

# 序列化和处理顺序
sampling_strategy: random   # random | fps

order:
  - "z"                 # Z轴序列化
  - "z-trans"           # Z轴转置序列化

# 编码器配置 - 轻量化设计
stride: [2, 2, 2, 2]    # 各层的下采样步长
enc_depths: [1, 1, 2, 2, 1]           # 减少Transformer块数量 (原: [2, 2, 2, 6, 2])
enc_channels: [16, 32, 64, 128, 256]  # 减少特征通道数 (原: [32, 64, 128, 256, 512])
enc_num_head: [1, 2, 4, 8, 16]        # 相应减少注意力头数 (原: [2, 4, 8, 16, 32])
enc_patch_size: [512, 512, 512, 512, 512]  # 减少patch大小以降低计算量

# 解码器配置 - 轻量化设计
dec_depths: [1, 1, 1, 2]              # 减少解码器Transformer块数量 (原: [2, 2, 2, 2])
dec_channels: [32, 32, 64, 128]       # 减少解码器特征通道数 (原: [64, 64, 128, 256])
dec_num_head: [2, 2, 4, 8]            # 相应减少注意力头数 (原: [4, 4, 8, 16])
dec_patch_size: [512, 512, 512, 512]  # 减少patch大小

# Transformer配置 - 优化计算效率
mlp_ratio: 2            # 减少MLP扩展比例 (原: 4)
qkv_bias: true          # 保持QKV偏置
attn_drop: 0.0          # 注意力dropout概率
proj_drop: 0.0          # 投影层dropout概率
drop_path: 0.05         # 减少DropPath概率 (原: 0.1)

# Flash Attention配置
enable_flash_attn: true # 启用Flash Attention以提升效率
flash_attn_version: 2   # Flash Attention版本

# 训练和推理设置
shuffle_orders: false   # 推理时关闭序列化顺序随机化

# 轻量化配置说明:
# 1. 输入: [B, N, 6] - xyz(3维) + rgb(3维)
# 2. 输出: xyz [B, K, 3], features [B, 256, K] (最终特征维度从512降至256)
# 3. 轻量化策略:
#    - 编码器深度: 减少约50%的Transformer块
#    - 特征通道: 最大通道数从512降至256
#    - 注意力头: 相应减少以匹配通道数
#    - MLP比例: 从4降至2，减少计算量
#    - Patch大小: 从1024降至512，减少内存占用
#    - 网格大小: 从0.02增至0.03，减少稀疏化后的点数
# 4. 性能特点:
#    - 参数量显著减少 (预计~8-12M，相比原版46M)
#    - 推理速度提升 (预计提升40-60%)
#    - 内存占用降低
#    - 仍保持稀疏卷积的优势
# 5. 适用场景:
#    - 资源受限的部署环境
#    - 实时性要求较高的应用
#    - 移动端或边缘设备
#    - 快速原型开发和测试

# 预期性能 (相比原版PTv3):
# - 参数量: ~8-12M (减少约75%)
# - 推理时间: ~30-40ms (提升约50%)
# - 内存占用: 显著降低
# - 精度损失: 轻微 (预计5-10%)
# - 支持点数: 1024-8192 (建议范围)

# 使用建议:
# 1. 适合对速度要求高于精度的场景
# 2. 可作为快速验证和原型开发的选择
# 3. 在资源充足时仍建议使用标准版ptv3.yaml
# 4. 可根据具体需求进一步调整参数
